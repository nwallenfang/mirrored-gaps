[gd_resource type="Shader" format=2]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.rc6's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec2 cursor;
uniform vec2 cursor_normal;
uniform float splash_progress;
uniform bool colors_inverted;

uniform vec4 color_left: hint_color;
uniform vec4 color_right: hint_color;

uniform float modulate: hint_range(0.0, 1.0, 0.1) = 1.0;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	float direction = dot(UV-cursor, cursor_normal);
	float inverted_factor = -2.0 * float(colors_inverted) + 1.0;  // this is -1 or 1 depending on bool
	vec3 color = color_left.rgb * float(inverted_factor * direction < 0.0) + color_right.rgb * float(inverted_factor * direction >= 0.0);
	ALBEDO = (1.0-float(abs(direction) / length(cursor_normal) < splash_progress)) * vec3(0.0) + 
	(1.0-float(abs(direction) / length(cursor_normal) >= splash_progress)) * color;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = modulate * albedo.a * albedo_tex.a * albedo_tex.r;
}
"
