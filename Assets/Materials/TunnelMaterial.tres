[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Assets/Sprites/noise_test.png" type="Texture" id=1]

[sub_resource type="Shader" id=2]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.rc6's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

uniform float scroll_speed = 5.0;  // m/s
uniform float tunnel_length = 527.19;
uniform vec2 scroll_direction = vec2(0.0, 1.0);
uniform bool scrolling_enabled = true;
uniform float distance_travelled = 0.0;

uniform bool emit_rings = true;
uniform float scanline_speed = 40;
uniform float scanline_width : hint_range(0, 0.49) = 0.001;
uniform float scanline_intensity = 0.35;
uniform vec4 scanline_color1: hint_color;
uniform vec4 scanline_color2: hint_color;

uniform float rotation = 0.0;
uniform vec4 tunnel_color1: hint_color;
uniform vec4 tunnel_color2: hint_color;

uniform float muster_speed = 0.1;

const float PI = 3.141;

varying vec2 scaled_uv;

uniform vec2 offset;
uniform float scale:hint_range(0.5, 1000.0);

// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 2.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
    vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    
    // First corner
    vec3 i  = floor(v + dot(v, vec3(C.y)) );
    vec3 x0 = v - i + dot(i, vec3(C.x)) ;
    
    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );
    
    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + vec3(C.x);
    vec3 x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
    
    // Permutations
    i = mod289_3(i); 
    vec4 p = permute( permute( permute( 
    		 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
    	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
    	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
    
    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;
    
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
    
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
    
    vec4 x = x_ *ns.x + vec4(ns.y);
    vec4 y = y_ *ns.x + vec4(ns.y);
    vec4 h = 1.0 - abs(x) - abs(y);
    
    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );
    
    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    
    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
    
    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);
    
    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    
    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
    m = m * m;
    return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

vec2 grid(vec2 uv, float columns, float rows){
	return fract(vec2(uv.x * columns, uv.y * rows));
}

vec3 add_ring(vec2 uv) {
	float number_of_rings = 8.0;
	vec2 grid_uv = grid(uv, 1, number_of_rings);
	// period = 1/speed?
	float period = 1.0;
	float speed = 1.0/period;
	float tunnel_segment_length = tunnel_length/number_of_rings;
	float uv_offset = mod(distance_travelled/scanline_speed, 2.0) - 1.0; // * scanline_period // tunnel_length/2.0

	float scanline = smoothstep(0.5 - scanline_width, 0.5, grid_uv.y + 0.5 * uv_offset) 
			* (1.0 - smoothstep(0.5, 0.5 + scanline_width, grid_uv.y + 0.5 *uv_offset)) * 1.0;//* pattern.r;

	
	vec3 scanline_color = clamp(scanline_color2.rgb + (vec3(1.0) * 0.5 * uv_offset), 0.0, 1.0);
	
	return scanline * scanline_intensity * scanline_color.rgb;
}

void vertex() {
	scaled_uv = UV.xy * uv1_scale.xy;
}

void fragment() {
	vec2 movement = float(scrolling_enabled) * distance_travelled *uv1_scale.y/2.0/tunnel_length * scroll_direction;
	
	vec3 albedo_tex = vec3(snoise(vec3(scaled_uv + movement, muster_speed * distance_travelled)));
//	float is_on_floor = float(UV.x > 0.45 && UV.x < 0.55);
	vec3 ring = add_ring(UV);
	
	vec3 tunnel_dark = albedo_tex * tunnel_color2.rgb;
	
	vec3 tunnel_color = mix(tunnel_color2.rgb, tunnel_color1.rgb, clamp(pow(albedo_tex.r, 0.2), 0.0, 1.0));
//	vec3 tunnel_color = mix(tunnel_color2.rgb, tunnel_color1.rgb, albedo_tex.r);
	ALBEDO = clamp(tunnel_color + ring, 0.0, 1.0);
}
"

[resource]
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/uv1_scale = Vector3( 20, 80, 5 )
shader_param/uv1_offset = Vector3( 0, 0.5, 0 )
shader_param/scroll_speed = 12.0
shader_param/tunnel_length = 527.19
shader_param/scroll_direction = Vector2( 0, 1 )
shader_param/scrolling_enabled = true
shader_param/distance_travelled = 0.0
shader_param/emit_rings = true
shader_param/scanline_speed = 20.0
shader_param/scanline_width = 0.005
shader_param/scanline_intensity = 0.35
shader_param/scanline_color1 = Color( 0.85098, 0, 1, 1 )
shader_param/scanline_color2 = Color( 0.266667, 0.254902, 0.235294, 1 )
shader_param/rotation = 0.0
shader_param/tunnel_color1 = Color( 0.25098, 0.196078, 0.301961, 1 )
shader_param/tunnel_color2 = Color( 0.466667, 0.384314, 0.498039, 1 )
shader_param/muster_speed = 0.013
shader_param/offset = null
shader_param/scale = 171.506
shader_param/texture_albedo = ExtResource( 1 )
