[gd_scene load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.rc6's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float clamp_and_map(float value, float istart, float istop, float ostart, float ostop) {
    value = clamp(value, istart, istop);
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}
void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALPHA = 0.0;
	for (int i = 0; i < 20; i++) {
		float t = TIME + .1*float(i);
		float y_pos = mod(UV.y + t * .5 + .25, .5);
		int count = int(t);
		float x_pos = mod(UV.x + sin(t* .3) * .02 + rand(vec2(float(count), float(i))), 1.0);
		
		float width = clamp_and_map((.25-abs(y_pos-.25)) - .2, 0.0, .2, 0.0, .005);
		
		ALPHA = clamp(ALPHA + (1.0 - smoothstep(0.0, width, abs(x_pos -.5))) , 0.0 , 1.0);
	}
	ALPHA = ALPHA * float(UV.y < .4);
	ALPHA = ALPHA * float(UV.y > .1) * albedo.a;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 0 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="CylinderMesh" id=3]
flip_faces = true

[node name="SpeedLines" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
material_override = SubResource( 2 )
mesh = SubResource( 3 )
